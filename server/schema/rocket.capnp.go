// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Rocket capnp.Struct

// Rocket_TypeID is the unique identifier for the type Rocket.
const Rocket_TypeID = 0xa29388e9a24f3574

func NewRocket(s *capnp.Segment) (Rocket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Rocket(st), err
}

func NewRootRocket(s *capnp.Segment) (Rocket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Rocket(st), err
}

func ReadRootRocket(msg *capnp.Message) (Rocket, error) {
	root, err := msg.Root()
	return Rocket(root.Struct()), err
}

func (s Rocket) String() string {
	str, _ := text.Marshal(0xa29388e9a24f3574, capnp.Struct(s))
	return str
}

func (s Rocket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Rocket) DecodeFromPtr(p capnp.Ptr) Rocket {
	return Rocket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Rocket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Rocket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Rocket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Rocket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Rocket) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Rocket) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Rocket) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Rocket) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Rocket) User() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Rocket) HasUser() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Rocket) UserBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Rocket) SetUser(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Rocket) DeathCoordY() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Rocket) SetDeathCoordY(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Rocket) DeathCoordX() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Rocket) SetDeathCoordX(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Rocket_List is a list of Rocket.
type Rocket_List = capnp.StructList[Rocket]

// NewRocket creates a new list of Rocket.
func NewRocket_List(s *capnp.Segment, sz int32) (Rocket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Rocket](l), err
}

// Rocket_Future is a wrapper for a Rocket promised by a client call.
type Rocket_Future struct{ *capnp.Future }

func (f Rocket_Future) Struct() (Rocket, error) {
	p, err := f.Future.Ptr()
	return Rocket(p.Struct()), err
}

const schema_9c76bc62a71f9389 = "x\xda\\\x8e\xb1J+Q\x10\x86\xff\x7fN\xf6\xe6B" +
	"\x12\x92%)\xefE\x04\x05\x15\x0c\x0a\x0a\x92F\xc1^" +
	"=\x82\xa0\xa0\xe0f\xb3\x90\x90\xb8\xbbn\x8e\xdaXY" +
	"i\x9dN,$M^\xc1\"/`\xeb#\x04D\xb4" +
	"\xb6\x95\x95\xa3$\xa0\xdd7\x1f3\xccWz\xd8\xc8," +
	"\x17\"\x81\xe8\x7f\xce\x9f\xd4\xacn\xf7_\xaf{}\xe8" +
	"\x02%\xbd\xe9M\x0d\xea\xc3\xf3;8\x92\x05\xca\xff\xd9" +
	"/\xcf\xd2\xd24_\xc0\xf4\x9d\xcfG\xb7\xf7\xa37\xe8" +
	"\x1c\x99>\x0e\x9e\xb6\xcc\xb03\x82\xf3\xb5\xf2\xc1\xab2" +
	"\xe5\x9b.\xb0\x96&\x91\xdf\x0eL\xd5\xa7\x17\x87qm" +
	"7\xf2\xb3\xed\xc0\xec\x90\xba\xa42@\x86\x80\xeb-\x00" +
	"\xfaPQ7\x85.Y\xa1\x95\x81\x95\xc7\x8a\xba#\xa4" +
	"T(\x80\xdb\xaa\x03\xba\xa9\xa8\x8d\xd0U\xacP\x01\xee" +
	"\xa9\x95\xb1\xa2\xbe\x14\x16C\xef$`\x1e\xc2<X<" +
	"\xeb\x06\xc9xH\x1b\x81g\x9a\x9bQ\x84l\xd28`" +
	"\x0e\xc2\xdc/\xbb?\xb1\xf6\xb0\xea{1\xc3\xb8\xb6\xd7" +
	"\x0d\x12\xd8\xde\xbf\x93\xdey\x9b6\xa3\xa8\x97\x84\xe3\xdc" +
	"\xc5\x1a\xa0\xe7\x14\xf5\x8a\xfc|\xbc\x1eG\xad\xd0t\xe9" +
	"@\xe8\x80\x9f\x01\x00\x00\xff\xff\x03\xb4O\xe1"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9c76bc62a71f9389,
		Nodes: []uint64{
			0xa29388e9a24f3574,
			0xeae2a09a5de501f4,
		},
		Compressed: true,
	})
}
