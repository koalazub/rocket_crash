// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Rocket capnp.Struct

// Rocket_TypeID is the unique identifier for the type Rocket.
const Rocket_TypeID = 0xa29388e9a24f3574

func NewRocket(s *capnp.Segment) (Rocket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return Rocket(st), err
}

func NewRootRocket(s *capnp.Segment) (Rocket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return Rocket(st), err
}

func ReadRootRocket(msg *capnp.Message) (Rocket, error) {
	root, err := msg.Root()
	return Rocket(root.Struct()), err
}

func (s Rocket) String() string {
	str, _ := text.Marshal(0xa29388e9a24f3574, capnp.Struct(s))
	return str
}

func (s Rocket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Rocket) DecodeFromPtr(p capnp.Ptr) Rocket {
	return Rocket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Rocket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Rocket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Rocket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Rocket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Rocket) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Rocket) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Rocket) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Rocket) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Rocket) User() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Rocket) HasUser() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Rocket) UserBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Rocket) SetUser(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Rocket) DeathCoordY() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Rocket) SetDeathCoordY(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Rocket) DeathCoordX() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Rocket) SetDeathCoordX(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Rocket) RocketType() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Rocket) HasRocketType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Rocket) RocketTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Rocket) SetRocketType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Rocket) Crashed() bool {
	return capnp.Struct(s).Bit(128)
}

func (s Rocket) SetCrashed(v bool) {
	capnp.Struct(s).SetBit(128, v)
}

// Rocket_List is a list of Rocket.
type Rocket_List = capnp.StructList[Rocket]

// NewRocket creates a new list of Rocket.
func NewRocket_List(s *capnp.Segment, sz int32) (Rocket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return capnp.StructList[Rocket](l), err
}

// Rocket_Future is a wrapper for a Rocket promised by a client call.
type Rocket_Future struct{ *capnp.Future }

func (f Rocket_Future) Struct() (Rocket, error) {
	p, err := f.Future.Ptr()
	return Rocket(p.Struct()), err
}

const schema_9c76bc62a71f9389 = "x\xda\\\x90?\x88\x13A\x18\xc5\xdf\xfbf\xd7\x13\xee" +
	"\xe4\x1c\xb3\x85\xa2r\x8d\x85'\xc4(*H\x1aE{" +
	"\xf5\x13\xc5?`\xb1\xd9\x0cD4\xd9ew\x8dX\xa9" +
	"\x9d)\xacb\xa1\xa2\x10\x83\x10\x05\x0b\x854B\x0a[" +
	"[[\xbb\x80\x85\x96b\xbf2\x84\x04\xb4{\xef\xc70" +
	"3\xef\xb7\xfb\xfb\xd9\xe0\xf8\xaeT z \xdcQ\x95" +
	"\xa7.\x8e\x7f>\x19\x8e\xa1\xfbi\xaa\xc1pk\xd2\x9a" +
	"\xf5_!4k\xc0\x89\x83\xdc\xc3Z\x9d>n\xf3\x1a" +
	"\xc1\xea\x0f\x7f\xdcz9\x9a\xff\x82\xee#\xab\xaf\x93o" +
	"\x17\xca\xd9\xdd9B\x7f\xa6\xf6X~\xd7\x9e\x8aO\x03" +
	"\xb9\x8f\xd3U\xe1\xf2\xbe\xcb\x1b\x85I:\xae\x1b7\xf2" +
	"4\xb9\xe3\xca\xa3I\x9c\xf5\xb2\xe6e_X^\"u" +
	"\xaf\x09\x80\x80\x80}q\x04\xd0g\x86:\x12Z2\xa2" +
	"\x87\xaf=|n\xa8o\x85\x94\x88\x02\xd87-@G" +
	"\x86\xfaAh\x0d#\x1a\xc0\xbe\xf7\xf0\x9d\xa1N\x856" +
	"\x90\x88\x01`?\xdd\x04\xf4\xa3\xa1\xce\x846|\x141" +
	"\x04\xec\xe7s\x80N\x0d\xf5\x8bp\xb3\x17w\x1d7 " +
	"\xdc\x007\xef\x15._\x96\xaa\xed\xe2\xb2s>M\xb1" +
	"\x96\xb7op\x1d\xc2\xf5\xff\xe8\xf5\x15]\x8c\xbb\xf2\x00" +
	"&[\xdd\xf60\xc9\xe3\xa2\xe3\xda$\x84\xde\xdeR\x88" +
	",\x84\xf8\xc7\x16:\xb6\x9aW\x0b\x97{\x19;W2" +
	"\xb6\xfd\xeeC\x86zL\xb8tQo\x02z\xd8PO" +
	"\xca\xbf\x7f=\x93\xa5\xb7{e\xc1\x10\xc2\x10\xfc\x1b\x00" +
	"\x00\xff\xff\x16\"l\xd5"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9c76bc62a71f9389,
		Nodes: []uint64{
			0xa29388e9a24f3574,
			0xeae2a09a5de501f4,
		},
		Compressed: true,
	})
}
