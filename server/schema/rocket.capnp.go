// Code generated by capnpc-go. DO NOT EDIT.

package rocket

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Rocket capnp.Struct

// Rocket_TypeID is the unique identifier for the type Rocket.
const Rocket_TypeID = 0xa29388e9a24f3574

func NewRocket(s *capnp.Segment) (Rocket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Rocket(st), err
}

func NewRootRocket(s *capnp.Segment) (Rocket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Rocket(st), err
}

func ReadRootRocket(msg *capnp.Message) (Rocket, error) {
	root, err := msg.Root()
	return Rocket(root.Struct()), err
}

func (s Rocket) String() string {
	str, _ := text.Marshal(0xa29388e9a24f3574, capnp.Struct(s))
	return str
}

func (s Rocket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Rocket) DecodeFromPtr(p capnp.Ptr) Rocket {
	return Rocket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Rocket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Rocket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Rocket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Rocket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Rocket) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Rocket) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Rocket) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Rocket) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Rocket) User() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Rocket) HasUser() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Rocket) UserBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Rocket) SetUser(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Rocket) DeathCoordY() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Rocket) SetDeathCoordY(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Rocket) DeathCoordX() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Rocket) SetDeathCoordX(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Rocket_List is a list of Rocket.
type Rocket_List = capnp.StructList[Rocket]

// NewRocket creates a new list of Rocket.
func NewRocket_List(s *capnp.Segment, sz int32) (Rocket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Rocket](l), err
}

// Rocket_Future is a wrapper for a Rocket promised by a client call.
type Rocket_Future struct{ *capnp.Future }

func (f Rocket_Future) Struct() (Rocket, error) {
	p, err := f.Future.Ptr()
	return Rocket(p.Struct()), err
}

const schema_9c76bc62a71f9389 = "x\xda\\\xc8\xa1N\xc3@\x18\x07\xf0\xff\xff\xbb\x8e\x8a" +
	"\x8dlG\xea\x10x\x12X&0(\x12\x1e\x00>\x14" +
	"$\x08n\xdd%%\xb0\xb5\\\x8f)\x14\x0a\xf4,j" +
	"\x86\x97 A\xf1\x00\x08\x9e\x81\xf0\x14%\x155\x93\xbf" +
	"\xdf\xe8\xf9$\x99l\x7f\x12\xa2Yo\xab\x89Gg\xeb" +
	"\xbf\x97\xd5\x1a\xbaKi^W{\xef\xd3\x8f\xe5\x1bz" +
	"\x92\x02\x93\xaf\x1d\xda\x9f\x14\xb0\xdf\xbf8hj\x1f\x96" +
	">\x8ck\x93\x17~\xee\xc6\xa1\xcc\xef|<\xcc]\xb5" +
	"\xa8\x8e/Z0\x9e\x93:2\x09\x90\x10\xb0n\x1f\xd0" +
	"kC-\x84\x96\xcc\xd8\xa6o\xf3\xc6P\xef\x85\x94\x8c" +
	"\x02\xd8\xdb)\xa0\x85\xa1F\xa15\xcch\x00\xfb\xd0f" +
	"e\xa8O\xc2\xe1\xc2\xcd=\x07\x10\x0e\xc0\xe1c\xedC" +
	"\x87f\xe6],N\xcb\x12i\x98]\xb1\x0fa\x7fc" +
	"/\xbb\xfd\x0f\x00\x00\xff\xff\xd6\xeb7\x9f"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9c76bc62a71f9389,
		Nodes: []uint64{
			0xa29388e9a24f3574,
		},
		Compressed: true,
	})
}
