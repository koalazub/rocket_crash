// Code generated by capnpc-go. DO NOT EDIT.

package user

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type User capnp.Struct

// User_TypeID is the unique identifier for the type User.
const User_TypeID = 0x9c78043d2fb22bdd

func NewUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return User(st), err
}

func NewRootUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return User(st), err
}

func ReadRootUser(msg *capnp.Message) (User, error) {
	root, err := msg.Root()
	return User(root.Struct()), err
}

func (s User) String() string {
	str, _ := text.Marshal(0x9c78043d2fb22bdd, capnp.Struct(s))
	return str
}

func (s User) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (User) DecodeFromPtr(p capnp.Ptr) User {
	return User(capnp.Struct{}.DecodeFromPtr(p))
}

func (s User) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s User) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s User) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s User) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s User) User() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s User) HasUser() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s User) UserBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s User) SetUser(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s User) Points() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s User) SetPoints(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// User_List is a list of User.
type User_List = capnp.StructList[User]

// NewUser creates a new list of User.
func NewUser_List(s *capnp.Segment, sz int32) (User_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[User](l), err
}

// User_Future is a wrapper for a User promised by a client call.
type User_Future struct{ *capnp.Future }

func (f User_Future) Struct() (User, error) {
	p, err := f.Future.Ptr()
	return User(p.Struct()), err
}

const schema_9c76bc62a71f9389 = "x\xda\x12Ht`1\xe4\xdd\xcf\xc8\xc0\x14(\xc2\xca" +
	"\xf6\xff\xae\xf6&}[\x96\x8a9\x0c\x81\x92\x8c\x8c\xff" +
	";'\xcb/O\xdaS6\x87\x81\x95\x91\x9d\x81A\xf0" +
	"\xe8'\xc1\x8b \xfal9\x83\xee\xff\xe2\xd4\xa2\xb2\xd4" +
	"\"\xfdb\xa6\xe4\x8c\xd4\xdcD\xfd\xd2\xe2\xd4\"\xbd\xe4" +
	"\xc4\x82\xbc\x02y\xab\xd0\xe2\xd4\xa2\x00F\xc6@\x0ef" +
	"\x16\x06\x06\x16F\x06\x06AM-\x06\x86@\x15f\xc6" +
	"@\x03&FFF\x11F\x90\x98\xae\x15\x03C\xa0\x06" +
	"3c\xa0\x09\x13#?H;#\x0f\x03\x13#\x0f\x03" +
	"\xa3}A~f^I1#+\x03\x13#+\x03#" +
	" \x00\x00\xff\xff\xe0\xfb%\x01"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9c76bc62a71f9389,
		Nodes: []uint64{
			0x9c78043d2fb22bdd,
		},
		Compressed: true,
	})
}
